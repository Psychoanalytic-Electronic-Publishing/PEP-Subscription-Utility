name: Plan and deploy infrastructure

on:
  pull_request:
    branches:
      - main

env:
  TF_RECREATE_MISSING_LAMBDA_PACKAGE: false

concurrency: ci-${{ github.ref }}

jobs:
  plan:
    defaults:
      run:
        working-directory: ./infra/staging
    runs-on: ubuntu-latest
    env:
      TF_VAR_pads_auth_token: ${{ secrets.STAGING_PADS_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - uses: actions/checkout@v3

      - id: plan
        uses: jordanallen-dev/terraform-cached/plan@v0.4
        with:
          terraform-root-path: infra/staging
          backend-config: ../backend.conf
    outputs:
      planExitcode: ${{ steps.plan.outputs.planExitcode }}

  apply:
    needs: [plan]
    if: always() && needs.plan.result == 'success' && needs.plan.outputs.planExitcode == 2
    environment: staging
    defaults:
      run:
        working-directory: ./infra/staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Restore Terraform Deps
        id: cache-deps-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            infra/staging/.terraform.lock.hcl
            infra/staging/.terraform
          key: terraform-deps

      - name: Restore Terraform Plan
        id: cache-plan-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            infra/staging/tfplan.out
            infra/staging/builds/
          key: terraform-plan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve "tfplan.out"

  clean:
    needs: [apply]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clear Plan Cache
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.deleteActionsCacheByKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "terraform-plan",
            })
